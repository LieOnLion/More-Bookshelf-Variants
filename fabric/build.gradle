plugins {
	id 'java'
	id 'idea'
	id 'maven-publish'
	id 'fabric-loom' version '1.5-SNAPSHOT'
}

base {
	archivesName = "${mod_id}-fabric-${minecraft_version}"
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings loom.officialMojangMappings()

	modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
	compileOnly project(":common")
}

loom {
	mixin {
		defaultRefmapName.set("${mod_id}.refmap.json")
	}

	runs {
		client {
			client()
			setConfigName("Fabric Client")
			ideConfigGenerated(true)
			runDir("run")
		}

		datagenClient {
			client()
			vmArg("-Dfabric-api.datagen")
			vmArg("-Dfabric-api.datagen.output-dir=${file("../common/src/main/generated")}")
			vmArg("-Dfabric-api.datagen.modid=${mod_id}")
			setConfigName("Data Generation Client")
			ideConfigGenerated(true)
			runDir("build/datagen")
		}

		server {
			server()
			setConfigName("Fabric Server")
			ideConfigGenerated(true)
			runDir("run")
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).configureEach {
	source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
	from(project(":common").sourceSets.main.allSource)
}

processResources {
	from project(":common").sourceSets.main.resources
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId base.archivesName.get()
			from components.java
		}
	}

	repositories {
		maven {
			url "file://" + System.getenv("local_maven")
		}
	}
}
