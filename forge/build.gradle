plugins {
	id 'idea'
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '[6.0,6.2)'
	id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

base {
	archivesName = "${mod_id}-forge-${minecraft_version}"
}

mixin {
	add(sourceSets.main, "${mod_id}.refmap.json")

	config("${mod_id}.mixins.json")
	config("${mod_id}.forge.mixins.json")
}

minecraft {
	mappings channel: 'official', version: minecraft_version
	copyIdeResources = true // Calls processResources when in dev

	runs {
		client {
			workingDirectory project.file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			taskName 'Client'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				modClientRun {
					source sourceSets.main
					source project(":common").sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			taskName 'Server'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				modServerRun {
					source sourceSets.main
					source project(":common").sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			taskName 'Data'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				modDataRun {
					source sourceSets.main
					source project(":common").sourceSets.main
				}
			}
		}
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")

	compileOnly project(":common")
}

tasks.withType(JavaCompile).configureEach {
	source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).configureEach {
	source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
	from(project(":common").sourceSets.main.allSource)
}

processResources {
	from project(":common").sourceSets.main.resources
}

jar.finalizedBy('reobfJar')

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId base.archivesName.get()
			from components.java
			fg.component(it)
		}
	}

	repositories {
		maven {
			url "file://" + System.getenv("local_maven")
		}
	}
}

sourceSets.each {
	def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
	it.output.resourcesDir = dir
	it.java.destinationDirectory = dir
}
